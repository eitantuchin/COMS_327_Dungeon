To run:
    Use make to compile.
    Use ./dungeon_UI to run.
    Use ./dungeon_UI --nummon x to run with x amount of monsters.
    You can use key z to attack and v to change direction as optional keys I added.

New/Updated Files:
    dungeon_UI.c contains all logic with added UI and the first basic full working game.
    dungeon_UI.h contains framework for dungeon_UI.c.

New/Updated Data Structures:
    mode type enum:
        - Contains the different types of states the game can be in
    direction enum:
        - Contains all 8 directions the PC can go
    message struct:
        - For messages to be displayed when a user does something in the game
    pc struct:
        - Updated to add currentDirection field
    event type enum:
        - Updated to add EVENT_PC field
    dungeon struct:
        - Updated to add mode type attribute
    dirNames array:
        - Holds all of the directions in an array

New/Updated Functions:
    movePlayer:
       - Moves the player based on given key input
    checkKeyInput:
       - Checks for the different required keys being pressed using ncurses
    checkMonsterPlacementToPC:
       - Checks if the monster is placed to close to the PC
    displayMessage:
       - Sets message parameters to ready message to be displayed
    attack:
       - Performs an attack on a monster if possible
    drawMessage:
       - Displays a message above the dungeon
    changeDirection:
       - Changes the direction of the PC
    generateDungeon:
       - Generates a new dungeon when using stairs
    useStairs:
       - If the user is standing on stairs they go up or down a dungeon level
    resetDungeonLevel:
       - Resets all necessary params to display a totally new dungeon
    getMonsterPositionString:
       - Gets the position of the monster to the player as a string
    displayMonsterList:
       - Displays the monster list view to the player
    main:
       - Updated to check for key input, only process events when it's not the player's turn, checks for mode
            types



