To run:
    Use "make" to compile executable dungeon game.
    Use "./dungeon_game" to start a new dungeon game.
    Use "./dungeon_game --nummon x" to start a new dungeon game with x amount of monsters.

Note:
    One small bug where when you quit the game there's a seg fault sometimes

New/Updated Files:
   dungeon_game.cpp contains all logic for the game
   dungeon_game.cpp is the framework for dungeon_game.cpp
   dungeon.cpp is the model of a dungeon
   dungeon.hpp is the framework for dungeon.cpp
   monster.cpp is the model of a monster
   monster.hpp is the framework for monster.cpp
   pc.cpp is the model of the PC
   pc.hpp is the framework of pc.cpp
   character.cpp is the parent model of pc and monster
   character.hpp is the framework for character.cpp
   priority_queue.cpp is the model of a priority queue in C++
   priority_queue.h is the framework for priority_queue.cpp

New/Updated Data Structures:
    fogMap:
        - A boolean map that tells the game where the PC has explored in a dungeon
    PC:
        - Restructured into a class in C++
    Monster:
        - Restructured into a class in C++
    Character:
        - A class that represnts a character in the dungeon
    Dungeon:
        - Restructured into a class in C++
    priority_queue:
        - Updated to C++ equivalent
    targetingPointerPreviousCell:
        - Contains the infromation about the previous cell the targeting point was at

New/Updated Functions:
    All functions updated to C++ equivalents.
    main:
        - Now includes a check for the fog of war mode and calls updateFogMap
    void updateFogMap(void):
        - Updates the fogmap where the false values in the boolean map are updated to true 
            wherever the PC has been to
    void printCharacter(int x, int y):
        - Prints a single character of the dungeon to the terminal under given game conditions
    void teleportPlayer(bool randomTeleport):
        - Teleports the player to either a random or deliberate location
    void moveTargetingPointer(int key):
        - Moves the targeting pointer depending on key input
    void initTargetingPointer(void):
        - Initializes the targeting pointer in a valid location in the map
    pair<int, int> getPointerCellPosition(void):
        - Returns the x and y positions of the targeting pointer
    moveMonster:
        - Now includes the correct implementation of moving a monster

    
